/*
 * Copyright © 2004 David Connet. All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation for any purpose and without fee is hereby granted, provided
 * that the above copyright notice appear in all copies, that both the
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the names of David Connet, dcon Software,
 * AgilityBook, AgilityRecordBook or "Agility Record Book" not be used in
 * advertising or publicity pertaining to distribution of the software
 * without specific, written prior permission. David Connet makes no
 * representations about the suitability of this software for any purpose.
 * It is provided "as is" without express or implied warranty.
 *
 * DAVID CONNET DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
 * EVENT SHALL DAVID CONNET BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
 * USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * http://opensource.org
 * Open Source Historical Permission Notice and Disclaimer.
 */

/**
 * @file
 *
 * @brief This parses the auto-generated resource.hm in order to convert the
 *        hex #defines into decimal so the hhc compiler will work with the
 *        text popups.
 * @author David Connet
 *
 * Revision History
 * @li 2004-05-20 DRC Created
 */

#if 0
>>>>>This is what resource.hm looks like:
// Microsoft Visual C++ generated Help ID include file.
// Used by AgilityBook.rc
//
#define HIDC_OPTIONS_FILTER_VENUES      0x80ee04f8    // IDD_VIEW_OPTIONS_FILTER
#define HIDC_OPTIONS_FILTER_VENUES_ALL  0x80ee04f6    // IDD_VIEW_OPTIONS_FILTER
#define HIDC_OPTIONS_FILTER_VENUES_SELECTED 0x80ee04f7    // IDD_VIEW_OPTIONS_FILTER

>>>>>This is what we need:
#define HIDC_OPTIONS_FILTER_VENUES      2163082488
#define HIDC_OPTIONS_FILTER_VENUES_ALL  2163082486
#define HIDC_OPTIONS_FILTER_VENUES_SELECTED 2163082487
#endif

#include <iostream>
#include <fstream>
#include <string>
#include <tchar.h>

// Include this simply for re-compile and cause the post-build event.
#include "../Win/resource.hm"

using namespace std;

int _tmain(int argc, _TCHAR* argv[])
{
	if (2 > argc)
	{
		cerr << "Usage: " << argv[0] << " resource.hm" << endl;
		return 1;
	}

	ifstream file(argv[argc-1]);
	if (!file.is_open())
	{
		cerr << "Can't read " << argv[argc-1] << endl;
		return 1;
	}

	cout << "// Autogenerated from " << argv[argc-1] << endl;
	char buffer[1000]; // We just "know" this is big enough. In fact, 80 would be good.
	while (!file.eof())
	{
		file.getline(buffer, sizeof(buffer) - 1);
		int len = static_cast<int>(strlen(buffer));
		while (0 < len && !file.eof() && '\\' == buffer[len-1])
		{
			file.getline(&buffer[len-1], sizeof(buffer) - len - 1);
			len = static_cast<int>(strlen(buffer));
		}
		if (0 < len)
		{
			string line(buffer);
			string::size_type pos = line.find("//");
			if (0 <= pos)
				line = line.substr(0, pos);
			if (0 < line.length())
			{
				if (0 == line.find("#define"))
				{
					pos = line.length() - 1;
					while (pos >= 0 && isspace(line[pos]))
						--pos;
					if (pos != line.length() - 1)
						line = line.substr(0, pos + 1);
					pos = line.find_first_of(" \t");
					while (isspace(line[pos]))
						++pos;
					cout << "#define ";
					line = line.substr(pos); // skip define and whitespace
					pos = line.find_first_of(" \t");
					string def = line.substr(0, pos + 1); // macro + 1 whitespace
					cout << def;
					while (isspace(line[pos]))
						++pos;
					line = line.substr(pos); // skip macro and whitespace
					unsigned long l;
					if (0 == line.find("0x"))
						l = strtoul(line.c_str(), NULL, 16);
					else
						l = atol(line.c_str());
					cout << l << endl;
				}
			}
		}
	}

	return 0;
}
