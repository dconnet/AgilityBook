Notes for releasing a new version.

Note: To test changes before publishing, set ARB_WWW_ROOT to your local webpage
root. (Mine is "d:\dcon\www\agilityrecordbook\") This only works in debug builds.

On new year, update copyright year in:
- License.txt
- AgilityBookLibs/configure.in
- AgilityBookLibs/Include/VersionInfoARB.h
- configure.in
- src/Projects/xcode*/AgilityBook/AgilityBook/AgilityBook-Info.plist
- src/Projects/xcode*/ARBHelp/ARBHelp/ARBHelp-Info.plist

Files to change before marking files for release:
- If file version has changed (arb version, not build number):
  - Update comments in src/Win/res/AgilityRecordBook.dtd (update website too)
  - Update the version in DefaultConfig.xml
  - Plus: Make sure that the Update() methods have been updated!
    If this is missed, the new data will not be merged.
- If configuration has changed:
  - Same as file version changing above
  - Make sure it is added to TestARB (TestConfig.cpp and CompileDatListTest.txt)
- History.txt
  Update program version and date, along with any comments.
  - Reflect these changes into www/agilityrecordbook/history.php
- Todo.txt
  Any necessary changes...

Run Doxygen and fix any warnings/errors it reports.
- cd ...\AgilityBook
- doxygen AgilityBook.dox

Commit all changes to GitHub.
(note: if doing this on official build machine, skip this commit and do it later)

Switch to build machine, do a full rebuild and verify it.
- cd ...\build
- 'BuildAll.py -w %WXBASE%\wxWidgets-3.2.2 -b fullupdate' [runs VC143 compile]
  - BuildAll options: -w wxwin [-b fullupdate | clean] compiler*
      -w wxwin: Root of wx tree, normally %WXBASE%\wxWidgets-3.2.2'
                Default is %WXWIN%
      -b type:  type is 'fullupdate', 'clean', or 'dirty' (default, dirty)
      -t:       Testing, just print commands to run
      compiler: vc142,vc143 (default: vc143)
    (note: If this needs to be re-run, revert
    .../AgilityBookLibs/configure.in, .../AgilityBookLibs/Include/VersionNumber.h, .../configure.in)
- cd ...\src\Projects\Installer
- Run 'GenMSI.py -b all' to create w32/x64 installers (and sign them),
  auto-update Misc\Installations\InstallGUIDs.csv, and create distribution dir.
  - Move distrib dir to \AgilityBook\distrib\vN.N.N.N
- Edit 
  - src/Projects/xcode*/AgilityBook/AgilityBook/AgilityBook-Info.plist
  - src/Projects/xcode*/ARBHelp/ARBHelp/ARBHelp-Info.plist
  and update the build number to what is in .../AgilityBookLibs/Include/VersionNumber.h

Commit all changes to GitHub. (First push AgilityBookLibs changes, then push
AgilityBook changes with that submodule update.)

Pull files onto Mac and build there (see MAC_BUILD.txt)
- Build:
  - cd .../AgilityBook/build
  - . ./setwxpath x.y.z release fat
    - where x.y.z is the wxWidget version
  - cd ..
  - autoconf
  - rm -rf build-rel-fat
  - mkdir build-rel-fat
  - cd build-rel-fat
  - ../configure
  - make dist
  - On machine (Mac) where pfx has been imported:
    - codesign -s "David Connet" ARBHelp.app
    - codesign -s "David Connet" AgilityBook.app
  - Use the '/Application/Utilities/Disk Utility' to create a dmg file
    - If dragging in app fails with "no space":
        hdiutil resize -size 200m ARB.dmg
      (or just create in DU with 200M - also can name directly when creating
      instead of below)
    - Set the name to "AgilityBook x.y.z". If this isn't done, if can be done
      later when the file is mounted.
    - Name the file AgilityBook-n_n_n_n-mac.dmg
    - Unmount and 'Convert' in DU (save as same name) to compress.

There should be no changes to commit.

Create the files to be distributed (make sure you archive them too)
- Any extra readme files required
- Generate zip file (github's zip has unix EOLs):
  - cd .../AgilityBook
  - git archive master --prefix="AgilityBook/" --format=zip > AgilityBook-n_n_n_n-src.zip
  - cd AgilityBookLibs
  - git archive master --prefix="AgilityBookLibs/" --format=zip > AgilityBookLibs.zip
  - Combine the zips by:
    - Expanding AgilityBookLibs.zip into a tmp dir
    - Open AgilityBook-n_n_n_n-src.zip, change to AgilityBookLibs directory
    - DnD files from tmp dir into the zip
    - Clean up tmp dir, delete AgilityBookLibs.zip

Create a release on GitHub tagged as: 'release/vn.n.n'
  - Create tag "release/vn.n.n"
  - AgilityBookLibs: Use the text as "See AgilityBook for details".
    Push no artifacts.
  - AgilityBook: Use History to create release notes, this is generally the same as the email announcement below.
  - AgilityBook-n_n_n_n-src.zip
  - AgilityBook-n_n_n_n-win.msi
  - AgilityBook-n_n_n_n-x64.msi
  - AgilityBook-n_n_n_n-mac.dmg

Web Site:
- Upload msi zip files and dmg to files/
  - AgilityBook-n_n_n_n-win.zip
  - AgilityBook-n_n_n_n-x64.zip
  - AgilityBook-n_n_n_n-mac.dmg
- Update "$fileversion" and "$fileVerNo" in func.php
- Update version2.xml
  - Run 'ARBUpdater /g' and generate new size and md5/sha1 tags for each file
    in version2.xml.
  - Update config file (ConfigN.txt) [if necessary]
  - Note: Duplicate 'osx' entry for 'osx-arm64' and 'osx-x64'. In the future
    I may release non-fat binaries, for now, keep it simple and release one.
    Since these are priority ranked, 'osx' should be last.
- Make sure things are current (ongoing task!).
  - Update DTD
  - Update bugs.php, index.php
  - Update news.xml (RSS feed)
- Push all updated files to server.
- Verify downloads are good.
  - Verify auto-update works from program
- Delete old zip files.

In Groups
- Send an email announcing new release.

Prepare for next release:
- Switch back to master
- Update version number
  - This is done by editing .../AgilityBookLibs/Include/VersionNumber.h
- Update History.txt
- Update
  - src/Projects/xcode*/AgilityBook/AgilityBook/AgilityBook-Info.plist
  - src/Projects/xcode*/ARBHelp/ARBHelp/ARBHelp-Info.plist
  to the new version number. Do not change the build number, we'll do that at
  release. This is so I can easily track dev builds.
