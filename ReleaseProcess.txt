Notes for releasing a new version.

Note: To test changes before publishing, set ARB_WWW_ROOT to your local webpage
root. (Mine is "d:\dcon\www\agilityrecordbook\") This only works in debug builds.

On new year, update copyright year in:
- License.txt
- AgilityBookLibs/configure.in
- AgilityBookLibs/Include/VersionInfoLibsARB.h
- configure.in
- src/Include/VersionInfoARB.h
- src/Projects/xcode*/AgilityBook/AgilityBook/AgilityBook-Info.plist
- src/Projects/xcode*/ARBHelp/ARBHelp/ARBHelp-Info.plist

Files to change before marking files for release:
- If file version has changed (arb version, not build number):
  - Update comments in src/Win/res/AgilityRecordBook.dtd (update website too)
  - Update the version in DefaultConfig.xml
  - Plus: Make sure that the Update() methods have been updated!
    If this is missed, the new data will not be merged.
- If configuration has changed:
  - Same as file version changing above
  - Make sure it is added to TestARB (TestConfig.cpp and CompileDatListTest.txt)
- Update CD Labels (.../Misc)
  - lsl: LightScribe Template Labeler
- History.txt
  Update program version and date, along with any comments.
  - Reflect these changes into www/agilityrecordbook/history.php
- Todo.txt
  Any necessary changes...

Run Doxygen and fix any warnings/errors it reports.
- cd ...\AgilityBook
- doxygen AgilityBook.dox

Commit all changes to GitHub.
(note: if doing this on official build machine, can skip this commit)

Switch to build machine, do a full rebuild and verify it.
- cd ...\build
- 'BuildAll.py -w %WXBASE%\wxWidgets-3.1.6 -b fullupdate' [runs VC143 compile]
  - BuildAll options: -w wxwin [-b fullupdate | clean] compiler*
      -w wxwin: Root of wx tree, normally %WXBASE%\wxWidgets-3.1.6'
                Default is %WXWIN%
      -b type:  type is 'fullupdate', 'clean', or 'dirty' (default, dirty)
      -t:       Testing, just print commands to run
      compiler: vc142,vc143 (default: vc143)
    (note: If this needs to be re-run, revert
    .../AgilityBookLibs/configure.in, .../AgilityBookLibs/Include/VersionNumberLibs.h,
    .../configure.in, .../src/Include/VersionNumber.h)
- cd ...\src\Projects\Installer
- Run 'GenMSI.py -b all' to create w32/x64 installers (and sign them),
  auto-update Misc\Installations\InstallGUIDs.csv, and create distribution dir.
  - Move distrib dir to \AgilityBook\distrib\vN.N.N.N

Commit all changes to GitHub.

Pull files onto Mac and build there (see MAC_BUILD.txt)
- Update Version (x.y.z) and Build (n) in xcode project General settings
  (unless this was done as prep for a new release below)
- Update CFBundleVersion in xcode plist files (build number), this can be
  done in Xcode in the 'General' page for ARBHelp and AgilityBook.
  (preferable to edit files on build machine step above for single commit)
  - NOTE: xcode is no longer updating CFBundleGetInfoString or
    CFBundleLongVersionString. Edit the plist files directly.
- export PATH=$WXWIN/build-release:$PATH
- cd .../AgilityBook/src
- autoconf
- rm -rf build-rel
- mkdir build-rel
- cd build-rel
- ../configure
- make dist
- On machine (Mac) where pfx has been imported:
  - codesign -s "David Connet" ARBHelp.app
  - codesign -s "David Connet" AgilityBook.app
- Use the '/Application/Utilities/Disk Utility' to create a dmg file
  - Name it AgilityBook-n_n_n_n-mac.dmg
  - After dragging in image, rename the mount point. (AgilityBook x.y.z)
  - Unmount and 'Convert' in DU (save as same name) to compress.

Commit all changes to GitHub (should just be the xcode project).

Create a release tag on AgilityBookLibs (see form below), sync AgilityBook submodule
to this tag and commit that change too.

Create the files to be distributed (make sure you archive them too)
- Any extra readme files required
- Generate zip file (github's zip has unix EOLs):
  - git archive master --prefix="AgilityBook/" --format=zip > AgilityBook-n_n_n_n-src.zip
  - Also do this on AgilityBookLibs and combine the zips.

Create a release on GitHub tagged as: 'release/vn.n.n'
  - Create tag "release/vn.n.n"
  - Use History to create release notes, these will be the same as the announcement below.
  - AgilityBook-n_n_n_n-src.zip
  - AgilityBook-n_n_n_n-win.msi
  - AgilityBook-n_n_n_n-x64.msi
  - AgilityBook-n_n_n_n-mac.dmg

Web Site:
- Upload msi zip files and dmg to files/
  - AgilityBook-n_n_n_n-win.zip
  - AgilityBook-n_n_n_n-x64.zip
  - AgilityBook-n_n_n_n-mac.dmg
- Update "$fileversion" and "$fileVerNo" in func.php
- Update version2.xml
  - Run 'ARBUpdater /g' and generate new size and md5/sha1 tags for each file.
  - Update config file (ConfigN.txt) [if necessary]
  - (note: version.txt is no longer updated. It's only for 2.x support)
- Make sure things are current (ongoing task!).
  - Update DTD
  - Update bugs.php, index.php
  - Update news.xml (RSS feed)
- Push all updated files to server.
- Verify downloads are good.
  - Verify auto-update works from program
- Delete old zip files.

In Groups
- Send an email announcing new release.

Backup:
- Backup development directory onto CD.
  - Remove unnecessary files (build relics, leave .git - complete backup!)
  - (Note: Could just expand the src.zip file)

Prepare for next release:
- Switch back to master
- Update version number
  - This is done by editing .../AgilityBookLibs/Include/VersionNumber.h and .../src/Include/VersionNumber.h
- Update History.txt
- Update CFBundleShortVersionString in xcode plist files
  (so it doesn't have to be done as part of the release process, except for
  CFBundleVersion - the build number - that is done at start of release process)
