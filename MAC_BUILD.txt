		   Universal Binary Build on MacOS

---
Currently, using these instructions to build a 10.4 binary on 10.5 don't quite
work right. Using 'otool -L', it can be observed that iconv is version 7.0.0.
If you use xcode, that properly uses iconv 5.0.0. So, to do an official build,
use these instructions since they will build the supporting files properly.
Then use xcode to compile agilitybook. Copy that executable into the output
directory of the previous build:
From: .../AgilityBook/src/Projects/macos/build-ansi/Release/agilitybook.app/Contents/MacOS
To: .../AgilityBook/build/AgilityBook.app/Contents/MacOS
[Note, when compiling in xcode, make sure it compiles both architectures, not
just the active one. In Debug, it's set to active, in Release, that's now off]
---

0. gettext package (from MacPorts): http://gettext.darwinports.com/
   - Also, it's highly recommended to update svn (sudo port install svn)

1. Install boost from source - download and then extract to a directory
(i.e. boost_1_42_0)
> cd boost_1_42_0
- Optionally, you can build this - don't need to though.
> bjam toolset=darwin variant=debug threading=multi link=static architecture=combined

If you don't install them in the system directory set the BOOST_ROOT env var
to the root of the boost directory:
> export BOOST_ROOT=/Users/me/boost_1_42_0
-- This can also be set in ~/.MacOSX/environment.plist (property manager)

2. Download and install WxMac (wxWidgets) in a local directory
[see http://wiki.wxwidgets.org/Getting_started_on_OS_X]
This seems to be the preferred install method for wxWidgets and allows you to
change settings of the library w/o having to be root and it allows you to have
multiple versions simultaneously with different settings
-- Set WXWIN to point to this directory (makes paths easier to set)

extract the tar to a directory (i.e ~/wx/wxWidgets-n.n.n [$WXWIN])
> cd $WXWIN
> rm -rf build-ansi
> mkdir build-ansi
> cd build-ansi
configure as a statically linked universal binary containing all builtin libs
to make it easier to deploy:
[Note: Due to a bug in wxWidgets, as of 2.8.10, do not use unicode. Formatting
strings using positional formatting does not work properly]
> ../configure \
	CC=gcc-4.0 CXX=g++-4.0 LD=g++-4.0 \
	--disable-shared --disable-unicode --enable-universal_binary \
	--with-regex=builtin --with-zlib=builtin \
	--with-macosx-version-min=10.4 --with-macosx-sdk=/Developer/SDKs/MacOSX10.4u.sdk \
	--disable-compat26 \
	--disable-debug_flag
[2.9.1+]
> ../configure \
	CC=gcc-4.0 CXX=g++-4.0 LD=g++-4.0 \
	--disable-shared --disable-unicode --enable-universal_binary \
	--with-regex=builtin --with-zlib=builtin \
	--with-macosx-version-min=10.4 --with-macosx-sdk=/Developer/SDKs/MacOSX10.4u.sdk \
	--disable-compat28 \
	--disable-debug_flag
> make
[Note: the configure output should show all libraries as either 'builtin' or 'no']

To enable debug builds in xcode:
> mkdir build-debug
> cd build-debug
> ../configure \
	CC=gcc-4.0 CXX=g++-4.0 LD=g++-4.0 \
	--disable-shared --disable-unicode --enable-universal_binary \
	--with-regex=builtin --with-zlib=builtin \
	--with-macosx-version-min=10.4 --with-macosx-sdk=/Developer/SDKs/MacOSX10.4u.sdk \
	--disable-compat26 \
	--enable-debug --enable-debug_gdb
[2.9.1+]
> ../configure \
	CC=gcc-4.0 CXX=g++-4.0 LD=g++-4.0 \
	--disable-shared --disable-unicode --enable-universal_binary \
	--with-regex=builtin --with-zlib=builtin \
	--with-macosx-version-min=10.4 --with-macosx-sdk=/Developer/SDKs/MacOSX10.4u.sdk \
	--disable-compat28 \
	--enable-debug --enable-debug_gdb
> make
The debug configuration of xcode is based on this.

Now you need to put this version of wx-config on your path so when you make
agilitybook it picks this version of wxMac
> export PATH=$WXWIN/build-ansi:$PATH

I simply created a 'setwxpath' in my root directory and execute:
> . ./setwxpath 2.8 ansi
(This (and setupwx which runs configure) can be found in .../AgilityBook/build/)

3. Build agilitybook as universal binary for PPC and Intel 32 bit architectures
> cd AgilityBook/
> autoconf
> mkdir build-ansi
> cd build-ansi
> ../configure
> make dist

4a. To package the distribution bundle [optional] [note, I do not do this]
- open /Developer/Applications/Utilities/PackageMaker
- select the Open menu option and open the Package Maker package build/AgilityRecordBook.pmdoc
- select the Build option and save the package wherever you like.

4b. To create a disk image:
- Open /Applications/Utilities/Disk\ Utility
- Create a new image
- Selecting a 40MB image is good, 10 is too small.
- Once mounted, drag AgilityBook.app in. Change the mounted name.
- Unmount
- Click 'Convert' (in Disk Utility) and compress.
